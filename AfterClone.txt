リポジトリからクローンを作成した後の環境構築

＜shebangの修正＞

bash のパスについて、
  which bash
で確認する。

bash のパスが /bin/bash ではない場合、
x スクリプトの shebang(ファイル先頭行)を上記の whichコマンドの結果に
書き換えてから、
  chmod 755 x
  ./x
で x スクリプトを実行すると、リポジトリ内のシェルスクリプトの shebangを
xで記述した shebangと同じ内容に書き換える。

次に示す「ファイルパーミッションの変更」の作業前に、こちらを実施すること。


＜ファイルパーミッションの変更＞

ファイルのパーミッションやシンボリックリンクの作成が幾つか必要になる。
  chmod 755 i
  ./i
で i スクリプトを実行すると、必要な作業を全て実施する。

ここまでやっておけば ./z でアーカイブを作成可能になる。

ビルドのためには ctags のインストールが必要になる。
どうしてもインストールできない場合は、makefileで ctagsを使っている
箇所をコメントアウトするのが、恐らく一番早い。
(色々考えると削除よりはコメントアウトの方を推奨する)

※githubのアクション build で上記を実際に実行している。
　「sudo apt install exuberant-ctags」で ctagsインストールも実施している。
　(Ubuntuではこれで行けそう)


＜管理スクリプト一覧＞

i   リポジトリのクローン作成後、最初に実行する。
    eスクリプトを内部で呼び、各ソース環境を整備する。
    githubの Linux(Ubuntu)コンパイル確認時でも使用する。

e   クローン内のファイル属性を変更する。
    実行属性がないものは 666、実行属性があるものは 755 に設定する。
    iスクリプトで呼ぶようにしたので、単体で使用することはほぼ無いか。
    githubの Linux(Ubuntu)コンパイル確認時でも使用する。

x   シェルスクリプトの shebangを全て統一する。
    /bin/bash ではない場合、xスクリプトの shebangを修正して実行すると、
    他のシェルスクリプトの shebangも全て同じ内容に変更する。

z   リリース用のアーカイブファイルを作成する。
    修正中のソース等、リリースに不要なファイルが存在する場合や、
    リリース用の内容になっていないファイルが存在する場合は処理中断する。
    引数にバージョンを指定すると、zスクリプト内の記述も自己修正する。

c   最新のリリースアーカイブを使用して、コンパイルチェックする。
    通常のコンパイルの他、rel や checkf でコンパイルするパターンや、
    xname や xconv を使って変換した結果でもコンパイル確認する。
    サンプルソースについてもコンパイル確認する。
    Linux上でのコンパイル確認は githubに pushした時に Ubuntu上で実施する。

w   最新のリリースアーカイブをワークに展開する。
    単純にアーカイブを使った動作確認をしたい時に使う。
    引数なしなら work に展開し、引数指定したら、そのディレクトリに展開する。

l   関数ごとの平均ライン数を計算する。
    各ソースファイルから関数を抽出してライン数を総計し、平均値を計算する。
    関数のブロック記述のみ { } を必ず1カラム目に書くルールで記述していることを
    利用しているため、万能で計算ができるわけではない。

p   ソース環境を綺麗にしてアーカイブする。
    ディレクトリを指定する。直下に BUILD がない場合は、処理中断する。
    BUILDがあるなら make allclean を実施してから、
    そのディレクトリをアーカイブして .tar.gzファイルを作成する。
    (githubでのソース管理に移行する前、環境移動するのに使っていた)

