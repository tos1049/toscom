#!/bin/bash

# toscomから開発環境を作成するスクリプト
# (1)toscom/ があるディレクトリで newenv.tar.gz を展開する。
#       tar xvfz toscom/newenv.tar.gz
# (2)新たに NEWENV というディレクトリが展開されるので入る。
#       cd NEWENV
# (3)本ファイルの内容を適宜更新後、実行する。
#       ./newenv
# (4)ディレクトリ名 NEWENV はその後 適宜リネームして問題ない。
#
# 本スクリプトを実行すると ../toscom/ からファイルをコピーする。
# カスタマイズ不可のものはコピーではなくシンボリックリンクを生成する。
# toscomに更新があった場合、新しい toscom.tar.gz を既存の toscomに
# 上書き展開するだけで、開発環境下のファイルもアップデートされる想定。
#
# カスタマイズ可能なファイル(com_spec.cなど)は上書きされずに残せる。
# このように独自のコードを壊すことが無いように考慮している。
# ただし toscom側のバージョンアップで com_custom.h に手動で修正が必要に
# なる可能性はあるので、アップデート内容を確認はすること。
#
# 本スクリプトを修正無しで実行すると、基本機能しか取り込まない。
# オプション機能を取り込みたい場合、以下の変数を 1 に設定すること。
#    USE_EXTRA     -> エキストラ機能
#    USE_SELECT    -> セレクト機能
#    USE_WINDOW    -> ウィンドウ機能
#
# 1 にした状態で newenvを実行すると、以下の処理を実施する。
#  ・必要なファイルのシンボリックリンクを作成する(既存なら何もしない)。
#  ・BUILD/makefile で必要な行のコメントアウトを外す。
#  ・main.c でヘッダファイルのインクルード文を追記する。
#
# ちなみに もし 0 にしていると、以下の処理を実施する。
#  ・その機能のファイルのシンボリックリンクを削除する(無いなら何もしない)。
#  ・BUILD/makefile でその機能に必要な部分をコメントアウトする。
#  ・main.c で対応するヘッダファイルのインクルード文を削除する。
#
# 複数回実行しても問題ないので、後でオプション機能がなにか必要になったら、
# その機能のフラグを 1 にして ./newenv を実行すれば簡単に追加出来る。
#


#####################################################
### toscom/xconv を使ったモジュール名変更実施時は ###
### NEWMODULEの内容を同じ名前に変更すること。     ###
#####################################################
NEWMODULE="com"

#####################################################
### 使用するオプション機能の設定を実施する。      ###
### 0 を指定して、関係ファイルがある場合削除する。###
#####################################################

# エキストラ機能を使いたい場合は 非0 を設定
USE_EXTRA=0

# セレクト機能を使いたい場合は 非0 を設定
USE_SELECT=0

# ウィンドウ機能を使いたい場合は 非0 を設定
USE_WINDOW=0











########################################
### 以後の処理は何も手を加えないこと ###
########################################

function judgeFlag() {
  if [ "$1" = "x" ]; then return 0; fi
  if [ "$1" = "x0" ]; then return 0; fi
  return 1
}

MOD="../toscom/${NEWMODULE}"

function makeFileName() {
  target="${MOD}_$1"
  base=$(basename "$target")
}

function setSymLink() {
  for file; do
    makeFileName $file
    if [ ! -e $base ]; then
      ln -s $target
      echo "$base  -> created"
    fi
  done
}

function delSymLink() {
  for file; do
    makeFileName $file
    if [ -e $base ]; then
      rm -fr $base
      echo "$base  -> deleted"
    fi
  done
}

MAKEFILE="BUILD/makefile"

function actLibs() {
  GREP="^#.*FLAGS.*=.*${1}"
  TARGET=$(grep "${GREP}" $MAKEFILE)
  if [ -n "$TARGET" ]; then
    echo "$MAKEFILE  -> activate: $TARGET"
    sed -i -e "/${GREP}/s/#//g" $MAKEFILE
  fi
}

function deactLibs() {
  GREP="^[^#].*FLAGS.*=.*${1}"
  TARGET=$(grep "${GREP}" $MAKEFILE)
  if [ -n "$TARGET" ]; then
    echo "$MAKEFILE  -> deactivate: $TARGET"
    sed -i -E "/$GREP/s/^(.*)/#&/" $MAKEFILE
  fi
}

MAINC="main.c"
COMIFH="#include \"${NEWMODULE}_if.h\""

function addHeads() {
  if [ ! -e "$MAINC" ]; then return 0; fi
  greplast=$(grep "#include \"${NEWMODULE}_" $MAINC | tail -n 1)
  target="${greplast/\/\/*/}"
  for head; do
    addhead="#include \"${NEWMODULE}_$head\""
    if [ ! -n "$(grep "$addhead" $MAINC)" ]; then
      sed -i -e "/${target}/a $addhead" $MAINC
      echo "$MAINC -> add: $addhead"
    fi
    target="$addhead"
  done
}

function delHeads() {
  if [ ! -e "$MAINC" ]; then return 0; fi
  for head; do
    target="#include \"${NEWMODULE}_$head\""
    if [ -n "$(grep "$target" $MAINC)" ]; then
      sed -i -e "/${target}/d" $MAINC
      echo "$MAINC -> delete: $target"
    fi
  done
}

function setFiles() {
  judgeFlag $1
  flag=$?
  files=$2
  heads=$3
  libs=$4
  if [ $flag = 1 ]; then
    setSymLink $files
    addHeads $heads
    if [ -n "$libs" ]; then
      actLibs "$libs"
    fi
  else
    delSymLink $files
    delHeads $heads
    if [ -n "$libs" ]; then
      deactLibs "$libs"
    fi
  fi
}

# モジュール名が "com" から変更されている場合は何もしない
if [ "x$NEWMODULE" != "xcom" ]; then
  if [ -e com_spec.c ]; then
    echo "delete com_* files"
    rm -fr com_if.h com_proc*.c com_debug.?
    rm -fr com_extra.? com_select.? com_window.? com_signal*.?
    ln -s ../toscom/xname
    ./xname &> /dev/null
    rm -fr xname
  fi
fi

COMBASE=(if.h proc.c procThread.c debug.h debug.c)
setFiles x1 "${COMBASE[*]}"

COMEXTRA=(extra.h extra.c)
LIBEXTRA="\-lm"
setFiles "x$USE_EXTRA" "${COMEXTRA[*]}" "extra.h" "$LIBEXTRA"

COMSELECT=(select.h select.c)
setFiles "x$USE_SELECT" "${COMSELECT[*]}" "select.h"

COMWINDOW=(window.h window.c)
LIBWINDOW="\-lncursesw"
setFiles "x$USE_WINDOW" "${COMWINDOW[*]}" "window.h" "$LIBWINDOW"

# シグナル機能はまだ未実装だが、記述だけはしておく
COMSIG1=(signal.h signal.c signalCom.h signalCom.c signalPrt1.h signalPrt1.c)
COMSIG2=(signalPrt2.h signalPrt2.c)
COMSIG3=(signalPrt3.h signalPrt3.c)
# シグナル機能はセット1がある場合のみ、セット2以降も許容する
judgeFlag "x$USE_SIGNAL1"
if [ $? = 1 ]; then
  setFiles "x$USE_SIGNAL1" "${COMSIG1[*]}" "signal.h signalCom.h signalPrt1.h"
  setFiles "x$USE_SIGNAL2" "${COMSIG2[*]}" "signalPrt2.h"
  setFiles "x$USE_SIGNAL3" "${COMSIG3[*]}" "signalPrt3.h"
fi

rm -fr *.txt
ln -s ../toscom/aboutIf.txt
ln -s ../toscom/aboutUpgrade.txt

echo ">>> newenv done"

