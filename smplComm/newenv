#!/bin/bash

#####################################################
### 使用するオプション機能の設定を実施する。      ###
### 0 を指定して、関係ファイルがある場合削除する。###
#####################################################

# エキストラ機能を使いたい場合は 非0 を設定
USE_EXTRA=1

# セレクト機能を使いたい場合は 非0 を設定
USE_SELECT=1

# ウィンドウ機能を使いたい場合は 非0 を設定
USE_WINDOW=0

#
# toscomから開発環境を作成するスクリプト
# (1)toscom/ があるディレクトリで newenv.tar.gz を展開する。
#       tar xvfz toscom/newenv.tar.gz
# (2)新たに NEWENV というディレクトリが展開されるので入る。
#       cd NEWENV
# (3)本ファイルの内容を適宜更新後、実行する。
#       ./newenv
# (4)ディレクトリ名 NEWENV はその後 適宜リネームして問題ない。
#
# 本スクリプトを実行すると ../toscom/ からファイルをコピーする。
# カスタマイズ不可のものはコピーではなくシンボリックリンクを生成する。
# toscomに更新があった場合、新しい toscom.tar.gz を既存の toscomに
# 上書き展開するだけで、開発環境下のファイルもアップデートされる想定。
#
# カスタマイズ可能なファイル(com_spec.cなど)は上書きされずに残せる。
# このように独自のコードを壊すことが無いように考慮している。
# ただし toscom側のバージョンアップで com_custom.h に手動で修正が必要に
# なる可能性はあるので、アップデート内容を確認はすること。
#
# 本スクリプトを修正無しで実行すると、基本機能しか取り込まない。
# オプション機能を取り込みたい場合、以下の変数を 1 に設定すること。
#    USE_EXTRA     -> エキストラ機能
#    USE_SELECT    -> セレクト機能
#    USE_WINDOW    -> ウィンドウ機能
#
# 1 にした状態で newenvを実行すると、以下の処理を実施する。
#  ・必要なファイルのシンボリックリンクを作成する(既存なら何もしない)。
#  ・BUILD/makefile で必要な行のコメントアウトを外す。
#  ・main.c でヘッダファイルのインクルード文を追記する。
#
# ちなみに もし 0 にしていると、以下の処理を実施する。
#  ・その機能のファイルのシンボリックリンクを削除する(無いなら何もしない)。
#  ・BUILD/makefile でその機能に必要な部分をコメントアウトする。
#  ・main.c で対応するヘッダファイルのインクルード文を削除する。
#
# 複数回実行しても問題ないので、後でオプション機能がなにか必要になったら、
# その機能のフラグを 1 にして ./newenv を実行すれば簡単に追加出来るし、
# 不要になった機能を削除することも可能。その後のビルド時は make clean を
# 先に打つか、make init でビルド実施すること。
#







########################################
### 以後の処理は何も手を加えないこと ###
########################################

# モジュール名について toscom本体の設定を取得する
. ../toscom/xnameconf

# 文字なし または "0" なら 0を返す。文字あり かつ 非0なら 1を返す
function judgeFlag() {
  if [ "$1" = "x" ]; then return 0; fi
  if [ "$1" = "x0" ]; then return 0; fi
  return 1
}

MOD="../toscom/${NEWMODULE}"

# ファイル名の取得
function makeFileName() {
  TARGET="${MOD}_$1"
  BASE=$(basename "$TARGET")
}

# 必要なシンボリックリンクを生成する
function setSymLink() {
  for FILE; do
    makeFileName $FILE
    if [ ! -e $BASE ] && [ ! -L $BASE ]; then
      ln -s $TARGET
      echo "$BASE  -> created"
    fi
  done
}

# 不要なシンボリックリンクを削除する
function delSymLink() {
  for FILE; do
    makeFileName $FILE
    if [ -e $BASE ] || [ -L $BASE ]; then
      rm -fr $BASE
      echo "$BASE  -> deleted"
    fi
  done
}

MAKEFILE="BUILD/makefile"

# makefileで必要なライブラリ記述のコメントアウトを外す
function actLibs() {
  GREP="^#.*FLAGS.*=.*${1}"
  TARGET=$(grep "${GREP}" $MAKEFILE)
  if [ -n "$TARGET" ]; then
    echo "$MAKEFILE  -> activate: $TARGET"
    sed -i -e "/${GREP}/s/#//g" $MAKEFILE
  fi
}

# makefileで不要なライブラリ記述をコメントアウトする
function deactLibs() {
  GREP="^[^#].*FLAGS.*=.*${1}"
  TARGET=$(grep "${GREP}" $MAKEFILE)
  if [ -n "$TARGET" ]; then
    echo "$MAKEFILE  -> deactivate: $TARGET"
    sed -i -E "/$GREP/s/^(.*)/#&/" $MAKEFILE
  fi
}

MAINC="main.c"

# main.cで必要なヘッダのインクルード文を追記する
function addHeads() {
  if [ ! -e "$MAINC" ]; then return 0; fi

  # 一番最後の toscomヘッダ インクルード文を探し、コメント等は除外して保持
  GREPLAST=$(grep "#include \"${NEWMODULE}_" $MAINC | tail -n 1)
  # インクルード文が見つからないときは何もしない
  if [ -z "${GREPLAST}" ]; then return 0; fi
  TARGET="${GREPLAST%\"*}\""
  # 「#include "cmo_if.h"」というような部分が $TARGETに入る想定

  for HEAD; do
    ADDHEAD="#include \"${NEWMODULE}_$HEAD\""
    if [ ! -n "$(grep "$ADDHEAD" $MAINC)" ]; then
      sed -i -e "/${TARGET}/a $ADDHEAD" $MAINC
      echo "$MAINC -> add: $ADDHEAD"
    fi
    # 追加したインクルード文の次に追加できるようにする
    TARGET="$ADDHEAD"
  done
}

# main.cで不要なヘッダのインクルード文を削除する
function delHeads() {
  if [ ! -e "$MAINC" ]; then return 0; fi
  for HEAD; do
    TARGET="#include \"${NEWMODULE}_$HEAD\""
    if [ -n "$(grep "$TARGET" $MAINC)" ]; then
      sed -i -e "/${TARGET}/d" $MAINC
      echo "$MAINC -> delete: $TARGET"
    fi
  done
}

# 各機能の追加/削除に必要な処理を実施する
function setFiles() {
  judgeFlag $1
  FLAG=$?
  FILES=$2
  HEADS=$3
  LIBS=$4

  if [ $FLAG = 1 ]; then
    setSymLink $FILES
    addHeads $HEADS
    if [ -n "$LIBS" ]; then
      actLibs "$LIBS"
    fi
  else
    delSymLink $FILES
    delHeads $HEADS
    if [ -n "$LIBS" ]; then
      deactLibs "$LIBS"
    fi
  fi
}

# リンクのないテキストファイルのシンボリックリンクを生成する
function setText() {
  if [ ! -e "$1" ] && [ ! -L "$1" ]; then
    ln -s ../toscom/$1
    echo "$1  -> created"
  fi
}


##############################################################################
##############################################################################

# 旧モジュール名のファイルがあると判断したら、削除する
if [ ${NEWMODULE} != ${OLDMODULE} ] && [ -e ${OLDMODULE}_spec.c ]; then
  echo "delete ${OLDMODULE}_* links"
  rm -fr ${OLDMODULE}_if.h ${OLDMODULE}_proc*.c ${OLDMODULE}_debug.?
  rm -fr ${OLDMODULE}_extra.?
  rm -fr ${OLDMODULE}_select.?
  rm -fr ${OLDMODULE}_window.?
  rm -fr ${OLDMODULE}_signal*.?
  echo "convert rest ${OLDMODULE}_* files"
  cp ../toscom/xname* .
  ./xname &> /dev/null
  rm -fr xname*
fi

# 各機能で必要なファイルやライブラリについて定義し、共通処理に掛ける
# モジュール名は com から変更される可能性があるので、ファイル名に含めない

### 基本機能 (必須) ###
COMBASE=(if.h proc.c procThread.c debug.h debug.c)
# ライブラリの記述は修正不要
setFiles "x1" "${COMBASE[*]}"

### エキストラ機能 (USE_EXTRA) ###
COMEXTRA=(extra.h extra.c)
LIBEXTRA="\-lm"
# makefileで -lm の記述がある行を修正対象とする
setFiles "x$USE_EXTRA" "${COMEXTRA[*]}" "extra.h" "$LIBEXTRA"

### セレクト機能 (USE_SELECT) ###
COMSELECT=(select.h select.c)
# ライブラリの記述は修正不要
setFiles "x$USE_SELECT" "${COMSELECT[*]}" "select.h"

### ウィンドウ機能 (USE_WINDOW) ###
COMWINDOW=(window.h window.c)
LIBWINDOW="\-lncursesw"
# makefileで -lncursesw の記述がある行を修正対象とする
setFiles "x$USE_WINDOW" "${COMWINDOW[*]}" "window.h" "$LIBWINDOW"

### シグナル機能 (USE_SIGNAL1/USE_SIGNAL2/USE_SIGNAL3) ###
COMSIG1=(signal.h signal.c signalCom.h signalCom.c signalPrt1.h signalPrt1.c)
COMSIG2=(signalPrt2.h signalPrt2.c)
COMSIG3=(signalPrt3.h signalPrt3.c)
# シグナル機能はセット1がある場合のみ、セット2以降も許容する
judgeFlag "x$USE_SIGNAL1"
if [ $? = 1 ]; then
  # ライブラリの記述は修正不要
  setFiles "x$USE_SIGNAL1" "${COMSIG1[*]}" "signal.h"
  setFiles "x$USE_SIGNAL2" "${COMSIG2[*]}" "signalPrt2.h"
  setFiles "x$USE_SIGNAL3" "${COMSIG3[*]}" "signalPrt3.h"
fi

### 説明テキストファイル ###
setText README.md
setText aboutIf.txt
setText aboutUpgrade.txt

echo ">>> newenv done"

